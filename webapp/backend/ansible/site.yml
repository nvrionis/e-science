---
- name: Setting up common tasks for every host 
  hosts: all
  remote_user: root
  roles:
     - commons

- name: Installing and configuring Hadoop-yarn cluster
  remote_user: root
  hosts: 
    - master
    - slaves
  roles:
    - {role: yarn, is_master: True, when: "ansible_hostname == '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and choose_role == 'yarn'"}
    - {role: yarn, is_slave: True, when: "ansible_hostname != '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and choose_role == 'yarn'"}

- name: Format cluster (if needed) and start the Hadoop-yarn daemons
  remote_user: root
  hosts:
    - master
    - slaves
  tasks:
     - { include: start_yarn.yml, is_master: True, when: "ansible_hostname == '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and manage_cluster == 'yarn'"}
     - { include: start_yarn.yml, is_slave: True, when: "ansible_hostname != '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and manage_cluster == 'yarn'"}

- name: Scale Hadoop Yarn Cluster by adding slaves
  remote_user: root
  hosts: all
  tasks:
    - { include: scale_cluster_add_node.yml, is_master: True, when: "ansible_hostname == '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and manage_cluster == 'add_slaves'"}
    - { include: scale_cluster_add_node.yml, when: "ansible_hostname == '{{ hostvars[groups['slaves'][0]].inventory_hostname_short}}' and manage_cluster == 'add_slaves'"}
    - { include: scale_cluster_add_node.yml, is_new_slave: True, when: "ansible_hostname != '{{ hostvars[groups['slaves'][0]].inventory_hostname_short}}' and ansible_hostname != '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and manage_cluster == 'add_slaves'"}
    
- name: Scale Hadoop Yarn Cluster by removing slaves
  remote_user: root
  hosts: master
  tasks:
    - { include: scale_cluster_remove_node.yml, is_master: True, when: "ansible_hostname == '{{ hostvars[groups['master'][0]].inventory_hostname_short}}' and manage_cluster == 'remove_slaves'"}

- name: Installing and configuring Cloudera cluster
  remote_user: root
  hosts:
    - master_cloud
    - slaves_cloud
  roles:
    - {role: cloudera, is_master: True, when: "ansible_hostname == '{{ hostvars[groups['master_cloud'][0]].inventory_hostname_short}}' and choose_role == 'cloudera'"}
    - {role: cloudera, is_slave: True, when: "ansible_hostname != '{{ hostvars[groups['master_cloud'][0]].inventory_hostname_short}}' and choose_role == 'cloudera'"}

- name: Format Cloudera cluster (if needed) and start the Hadoop cloudera daemons
  remote_user: root
  hosts:
    - master_cloud
    - slaves_cloud
  tasks:
     - { include: start_cloudera.yml, is_master: True, when: "ansible_hostname == '{{ hostvars[groups['master_cloud'][0]].inventory_hostname_short}}' and manage_cluster == 'cloudera'"}
     - { include: start_cloudera.yml, is_slave: True, when: "ansible_hostname != '{{ hostvars[groups['master_cloud'][0]].inventory_hostname_short}}' and manage_cluster == 'cloudera'"}
